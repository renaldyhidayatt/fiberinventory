// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "fiberinventory/internal/domain"
	models "fiberinventory/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserService) Delete(id string) (*models.ModelUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), id)
}

// Login mocks base method.
func (m *MockUserService) Login(input *domain.LoginInput) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", input)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), input)
}

// Register mocks base method.
func (m *MockUserService) Register(input *domain.RegisterInput) (*models.ModelUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", input)
	ret0, _ := ret[0].(*models.ModelUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), input)
}

// Result mocks base method.
func (m *MockUserService) Result(id string) (*models.ModelUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockUserServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockUserService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockUserService) Results() (*[]models.ModelUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockUserServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockUserService)(nil).Results))
}

// Update mocks base method.
func (m *MockUserService) Update(input *domain.UpdateUserRequest) (*models.ModelUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), input)
}

// MockCategoryService is a mock of CategoryService interface.
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService.
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance.
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryService) Create(input *domain.CreateCategoryRequest) (*models.ModelCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(*models.ModelCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockCategoryService) Delete(id string) (*models.ModelCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryService)(nil).Delete), id)
}

// Result mocks base method.
func (m *MockCategoryService) Result(id string) (*models.ModelCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockCategoryServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockCategoryService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockCategoryService) Results() (*[]models.ModelCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockCategoryServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockCategoryService)(nil).Results))
}

// Update mocks base method.
func (m *MockCategoryService) Update(input *domain.UpdateCategoryRequest) (*models.ModelCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryService)(nil).Update), input)
}

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerService) Create(input *domain.CreateCustomerRequest) (*models.ModelCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(*models.ModelCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockCustomerService) Delete(id string) (*models.ModelCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerService)(nil).Delete), id)
}

// Result mocks base method.
func (m *MockCustomerService) Result(id string) (*models.ModelCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockCustomerServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockCustomerService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockCustomerService) Results() (*[]models.ModelCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockCustomerServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockCustomerService)(nil).Results))
}

// Update mocks base method.
func (m *MockCustomerService) Update(input *domain.UpdateCustomerRequest) (*models.ModelCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCustomerServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerService)(nil).Update), input)
}

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductService) Create(input *domain.CreateProductRequest) (*models.ModelProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(*models.ModelProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockProductService) Delete(id string) (*models.ModelProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProductServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductService)(nil).Delete), id)
}

// Result mocks base method.
func (m *MockProductService) Result(id string) (*models.ModelProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockProductServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockProductService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockProductService) Results() (*[]models.ModelProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockProductServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockProductService)(nil).Results))
}

// Update mocks base method.
func (m *MockProductService) Update(input *domain.UpdateProductRequest) (*models.ModelProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductService)(nil).Update), input)
}

// MockProductKeluarService is a mock of ProductKeluarService interface.
type MockProductKeluarService struct {
	ctrl     *gomock.Controller
	recorder *MockProductKeluarServiceMockRecorder
}

// MockProductKeluarServiceMockRecorder is the mock recorder for MockProductKeluarService.
type MockProductKeluarServiceMockRecorder struct {
	mock *MockProductKeluarService
}

// NewMockProductKeluarService creates a new mock instance.
func NewMockProductKeluarService(ctrl *gomock.Controller) *MockProductKeluarService {
	mock := &MockProductKeluarService{ctrl: ctrl}
	mock.recorder = &MockProductKeluarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductKeluarService) EXPECT() *MockProductKeluarServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductKeluarService) Create(input *domain.CreateProductKeluarRequest) (*models.ModelProductKeluar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(*models.ModelProductKeluar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductKeluarServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductKeluarService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockProductKeluarService) Delete(id string) (*models.ModelProductKeluar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelProductKeluar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProductKeluarServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductKeluarService)(nil).Delete), id)
}

// Result mocks base method.
func (m *MockProductKeluarService) Result(id string) (*models.ModelProductKeluar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelProductKeluar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockProductKeluarServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockProductKeluarService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockProductKeluarService) Results() (*[]models.ModelProductKeluar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelProductKeluar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockProductKeluarServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockProductKeluarService)(nil).Results))
}

// Update mocks base method.
func (m *MockProductKeluarService) Update(input *domain.UpdateProductKeluarRequest) (*models.ModelProductKeluar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelProductKeluar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductKeluarServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductKeluarService)(nil).Update), input)
}

// MockProductMasukService is a mock of ProductMasukService interface.
type MockProductMasukService struct {
	ctrl     *gomock.Controller
	recorder *MockProductMasukServiceMockRecorder
}

// MockProductMasukServiceMockRecorder is the mock recorder for MockProductMasukService.
type MockProductMasukServiceMockRecorder struct {
	mock *MockProductMasukService
}

// NewMockProductMasukService creates a new mock instance.
func NewMockProductMasukService(ctrl *gomock.Controller) *MockProductMasukService {
	mock := &MockProductMasukService{ctrl: ctrl}
	mock.recorder = &MockProductMasukServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductMasukService) EXPECT() *MockProductMasukServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductMasukService) Create(input *domain.CreateProductMasukRequest) (*models.ModelProductMasuk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(*models.ModelProductMasuk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductMasukServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductMasukService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockProductMasukService) Delete(id string) (*models.ModelProductMasuk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelProductMasuk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProductMasukServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductMasukService)(nil).Delete), id)
}

// Result mocks base method.
func (m *MockProductMasukService) Result(id string) (*models.ModelProductMasuk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelProductMasuk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockProductMasukServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockProductMasukService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockProductMasukService) Results() (*[]models.ModelProductMasuk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelProductMasuk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockProductMasukServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockProductMasukService)(nil).Results))
}

// Update mocks base method.
func (m *MockProductMasukService) Update(input *domain.UpdateProductMasukRequest) (*models.ModelProductMasuk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelProductMasuk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductMasukServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductMasukService)(nil).Update), input)
}

// MockSaleService is a mock of SaleService interface.
type MockSaleService struct {
	ctrl     *gomock.Controller
	recorder *MockSaleServiceMockRecorder
}

// MockSaleServiceMockRecorder is the mock recorder for MockSaleService.
type MockSaleServiceMockRecorder struct {
	mock *MockSaleService
}

// NewMockSaleService creates a new mock instance.
func NewMockSaleService(ctrl *gomock.Controller) *MockSaleService {
	mock := &MockSaleService{ctrl: ctrl}
	mock.recorder = &MockSaleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleService) EXPECT() *MockSaleServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSaleService) Create(input *domain.CreateSaleRequest) (*models.ModelSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(*models.ModelSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSaleServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSaleService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockSaleService) Delete(id string) (*models.ModelSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSaleServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSaleService)(nil).Delete), id)
}

// Result mocks base method.
func (m *MockSaleService) Result(id string) (*models.ModelSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockSaleServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockSaleService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockSaleService) Results() (*[]models.ModelSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockSaleServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockSaleService)(nil).Results))
}

// Update mocks base method.
func (m *MockSaleService) Update(input *domain.UpdateSaleRequest) (*models.ModelSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSaleServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSaleService)(nil).Update), input)
}

// MockSupplierService is a mock of SupplierService interface.
type MockSupplierService struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierServiceMockRecorder
}

// MockSupplierServiceMockRecorder is the mock recorder for MockSupplierService.
type MockSupplierServiceMockRecorder struct {
	mock *MockSupplierService
}

// NewMockSupplierService creates a new mock instance.
func NewMockSupplierService(ctrl *gomock.Controller) *MockSupplierService {
	mock := &MockSupplierService{ctrl: ctrl}
	mock.recorder = &MockSupplierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierService) EXPECT() *MockSupplierServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSupplierService) Create(input *domain.CreateSupplierRequest) (*models.ModelSupplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(*models.ModelSupplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSupplierServiceMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSupplierService)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockSupplierService) Delete(id string) (*models.ModelSupplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.ModelSupplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSupplierServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSupplierService)(nil).Delete), id)
}

// Result mocks base method.
func (m *MockSupplierService) Result(id string) (*models.ModelSupplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", id)
	ret0, _ := ret[0].(*models.ModelSupplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockSupplierServiceMockRecorder) Result(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockSupplierService)(nil).Result), id)
}

// Results mocks base method.
func (m *MockSupplierService) Results() (*[]models.ModelSupplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].(*[]models.ModelSupplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockSupplierServiceMockRecorder) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockSupplierService)(nil).Results))
}

// Update mocks base method.
func (m *MockSupplierService) Update(input *domain.UpdateSupplierRequest) (*models.ModelSupplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(*models.ModelSupplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSupplierServiceMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSupplierService)(nil).Update), input)
}
