// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: productkeluar.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductKeluarServiceClient is the client API for ProductKeluarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductKeluarServiceClient interface {
	CreateProductKeluar(ctx context.Context, in *CreateProductKeluarInput, opts ...grpc.CallOption) (*ProductKeluarResponse, error)
	GetProductKeluars(ctx context.Context, in *ProductKeluarsRequest, opts ...grpc.CallOption) (*ProductKeluarsResponse, error)
	GetProductKeluar(ctx context.Context, in *ProductKeluarRequest, opts ...grpc.CallOption) (*ProductKeluarResponse, error)
	UpdateProductKeluar(ctx context.Context, in *UpdateProductKeluarInput, opts ...grpc.CallOption) (*ProductKeluarResponse, error)
	DeleteProductKeluar(ctx context.Context, in *ProductKeluarRequest, opts ...grpc.CallOption) (*DeleteProductKeluarResponse, error)
}

type productKeluarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductKeluarServiceClient(cc grpc.ClientConnInterface) ProductKeluarServiceClient {
	return &productKeluarServiceClient{cc}
}

func (c *productKeluarServiceClient) CreateProductKeluar(ctx context.Context, in *CreateProductKeluarInput, opts ...grpc.CallOption) (*ProductKeluarResponse, error) {
	out := new(ProductKeluarResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductKeluarService/CreateProductKeluar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productKeluarServiceClient) GetProductKeluars(ctx context.Context, in *ProductKeluarsRequest, opts ...grpc.CallOption) (*ProductKeluarsResponse, error) {
	out := new(ProductKeluarsResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductKeluarService/GetProductKeluars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productKeluarServiceClient) GetProductKeluar(ctx context.Context, in *ProductKeluarRequest, opts ...grpc.CallOption) (*ProductKeluarResponse, error) {
	out := new(ProductKeluarResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductKeluarService/GetProductKeluar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productKeluarServiceClient) UpdateProductKeluar(ctx context.Context, in *UpdateProductKeluarInput, opts ...grpc.CallOption) (*ProductKeluarResponse, error) {
	out := new(ProductKeluarResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductKeluarService/UpdateProductKeluar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productKeluarServiceClient) DeleteProductKeluar(ctx context.Context, in *ProductKeluarRequest, opts ...grpc.CallOption) (*DeleteProductKeluarResponse, error) {
	out := new(DeleteProductKeluarResponse)
	err := c.cc.Invoke(ctx, "/pb.ProductKeluarService/DeleteProductKeluar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductKeluarServiceServer is the server API for ProductKeluarService service.
// All implementations must embed UnimplementedProductKeluarServiceServer
// for forward compatibility
type ProductKeluarServiceServer interface {
	CreateProductKeluar(context.Context, *CreateProductKeluarInput) (*ProductKeluarResponse, error)
	GetProductKeluars(context.Context, *ProductKeluarsRequest) (*ProductKeluarsResponse, error)
	GetProductKeluar(context.Context, *ProductKeluarRequest) (*ProductKeluarResponse, error)
	UpdateProductKeluar(context.Context, *UpdateProductKeluarInput) (*ProductKeluarResponse, error)
	DeleteProductKeluar(context.Context, *ProductKeluarRequest) (*DeleteProductKeluarResponse, error)
	mustEmbedUnimplementedProductKeluarServiceServer()
}

// UnimplementedProductKeluarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductKeluarServiceServer struct {
}

func (UnimplementedProductKeluarServiceServer) CreateProductKeluar(context.Context, *CreateProductKeluarInput) (*ProductKeluarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductKeluar not implemented")
}
func (UnimplementedProductKeluarServiceServer) GetProductKeluars(context.Context, *ProductKeluarsRequest) (*ProductKeluarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductKeluars not implemented")
}
func (UnimplementedProductKeluarServiceServer) GetProductKeluar(context.Context, *ProductKeluarRequest) (*ProductKeluarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductKeluar not implemented")
}
func (UnimplementedProductKeluarServiceServer) UpdateProductKeluar(context.Context, *UpdateProductKeluarInput) (*ProductKeluarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductKeluar not implemented")
}
func (UnimplementedProductKeluarServiceServer) DeleteProductKeluar(context.Context, *ProductKeluarRequest) (*DeleteProductKeluarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductKeluar not implemented")
}
func (UnimplementedProductKeluarServiceServer) mustEmbedUnimplementedProductKeluarServiceServer() {}

// UnsafeProductKeluarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductKeluarServiceServer will
// result in compilation errors.
type UnsafeProductKeluarServiceServer interface {
	mustEmbedUnimplementedProductKeluarServiceServer()
}

func RegisterProductKeluarServiceServer(s grpc.ServiceRegistrar, srv ProductKeluarServiceServer) {
	s.RegisterService(&ProductKeluarService_ServiceDesc, srv)
}

func _ProductKeluarService_CreateProductKeluar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductKeluarInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductKeluarServiceServer).CreateProductKeluar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductKeluarService/CreateProductKeluar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductKeluarServiceServer).CreateProductKeluar(ctx, req.(*CreateProductKeluarInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductKeluarService_GetProductKeluars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductKeluarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductKeluarServiceServer).GetProductKeluars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductKeluarService/GetProductKeluars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductKeluarServiceServer).GetProductKeluars(ctx, req.(*ProductKeluarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductKeluarService_GetProductKeluar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductKeluarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductKeluarServiceServer).GetProductKeluar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductKeluarService/GetProductKeluar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductKeluarServiceServer).GetProductKeluar(ctx, req.(*ProductKeluarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductKeluarService_UpdateProductKeluar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductKeluarInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductKeluarServiceServer).UpdateProductKeluar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductKeluarService/UpdateProductKeluar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductKeluarServiceServer).UpdateProductKeluar(ctx, req.(*UpdateProductKeluarInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductKeluarService_DeleteProductKeluar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductKeluarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductKeluarServiceServer).DeleteProductKeluar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProductKeluarService/DeleteProductKeluar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductKeluarServiceServer).DeleteProductKeluar(ctx, req.(*ProductKeluarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductKeluarService_ServiceDesc is the grpc.ServiceDesc for ProductKeluarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductKeluarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProductKeluarService",
	HandlerType: (*ProductKeluarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductKeluar",
			Handler:    _ProductKeluarService_CreateProductKeluar_Handler,
		},
		{
			MethodName: "GetProductKeluars",
			Handler:    _ProductKeluarService_GetProductKeluars_Handler,
		},
		{
			MethodName: "GetProductKeluar",
			Handler:    _ProductKeluarService_GetProductKeluar_Handler,
		},
		{
			MethodName: "UpdateProductKeluar",
			Handler:    _ProductKeluarService_UpdateProductKeluar_Handler,
		},
		{
			MethodName: "DeleteProductKeluar",
			Handler:    _ProductKeluarService_DeleteProductKeluar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productkeluar.proto",
}
